/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUEZ_DEVICE_H__
#define __BLUEZ_DEVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (bluez_device_org_freedesktop_dbus_introspectable_get_type ())
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, bluezdeviceOrgFreedesktopDBusIntrospectable))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, bluezdeviceOrgFreedesktopDBusIntrospectableIface))

struct _bluezdeviceOrgFreedesktopDBusIntrospectable;
typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectable bluezdeviceOrgFreedesktopDBusIntrospectable;
typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableIface bluezdeviceOrgFreedesktopDBusIntrospectableIface;

struct _bluezdeviceOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    bluezdeviceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType bluez_device_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_device_org_freedesktop_dbus_introspectable_interface_info (void);
guint bluez_device_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_device_org_freedesktop_dbus_introspectable_complete_introspect (
    bluezdeviceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *xml);



/* D-Bus method calls: */
void bluez_device_org_freedesktop_dbus_introspectable_call_introspect (
    bluezdeviceOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device_org_freedesktop_dbus_introspectable_call_introspect_finish (
    bluezdeviceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device_org_freedesktop_dbus_introspectable_call_introspect_sync (
    bluezdeviceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (bluez_device_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, bluezdeviceOrgFreedesktopDBusIntrospectableProxy))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, bluezdeviceOrgFreedesktopDBusIntrospectableProxyClass))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, bluezdeviceOrgFreedesktopDBusIntrospectableProxyClass))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableProxy bluezdeviceOrgFreedesktopDBusIntrospectableProxy;
typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableProxyClass bluezdeviceOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableProxyPrivate bluezdeviceOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _bluezdeviceOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezdeviceOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _bluezdeviceOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_device_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

void bluez_device_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdeviceOrgFreedesktopDBusIntrospectable *bluez_device_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdeviceOrgFreedesktopDBusIntrospectable *bluez_device_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_device_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdeviceOrgFreedesktopDBusIntrospectable *bluez_device_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdeviceOrgFreedesktopDBusIntrospectable *bluez_device_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (bluez_device_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, bluezdeviceOrgFreedesktopDBusIntrospectableSkeleton))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableSkeleton bluezdeviceOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonClass bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonPrivate bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _bluezdeviceOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _bluezdeviceOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_device_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

bluezdeviceOrgFreedesktopDBusIntrospectable *bluez_device_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Device1 */

#define BLUEZ_DEVICE_TYPE_ (bluez_device__get_type ())
#define BLUEZ_DEVICE_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_, bluezdevice))
#define BLUEZ_DEVICE_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_))
#define BLUEZ_DEVICE__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_DEVICE_TYPE_, bluezdeviceIface))

struct _bluezdevice;
typedef struct _bluezdevice bluezdevice;
typedef struct _bluezdeviceIface bluezdeviceIface;

struct _bluezdeviceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel_pairing) (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect) (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect_profile) (
    bluezdevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_disconnect) (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect_profile) (
    bluezdevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_pair) (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_adapter) (bluezdevice *object);

  const gchar * (*get_address) (bluezdevice *object);

  const gchar * (*get_alias) (bluezdevice *object);

  guint16  (*get_appearance) (bluezdevice *object);

  gboolean  (*get_blocked) (bluezdevice *object);

  guint  (*get_class) (bluezdevice *object);

  gboolean  (*get_connected) (bluezdevice *object);

  const gchar *const * (*get_gatt_services) (bluezdevice *object);

  const gchar * (*get_icon) (bluezdevice *object);

  gboolean  (*get_legacy_pairing) (bluezdevice *object);

  GVariant * (*get_manufacturer_data) (bluezdevice *object);

  const gchar * (*get_modalias) (bluezdevice *object);

  const gchar * (*get_name) (bluezdevice *object);

  gboolean  (*get_paired) (bluezdevice *object);

  gint16  (*get_rssi) (bluezdevice *object);

  GVariant * (*get_service_data) (bluezdevice *object);

  gboolean  (*get_trusted) (bluezdevice *object);

  gint16  (*get_tx_power) (bluezdevice *object);

  const gchar *const * (*get_uuids) (bluezdevice *object);

};

GType bluez_device__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_device__interface_info (void);
guint bluez_device__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_device__complete_disconnect (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

void bluez_device__complete_connect (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

void bluez_device__complete_connect_profile (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

void bluez_device__complete_disconnect_profile (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

void bluez_device__complete_pair (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);

void bluez_device__complete_cancel_pairing (
    bluezdevice *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_device__call_disconnect (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device__call_disconnect_finish (
    bluezdevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device__call_disconnect_sync (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_device__call_connect (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device__call_connect_finish (
    bluezdevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device__call_connect_sync (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_device__call_connect_profile (
    bluezdevice *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device__call_connect_profile_finish (
    bluezdevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device__call_connect_profile_sync (
    bluezdevice *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void bluez_device__call_disconnect_profile (
    bluezdevice *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device__call_disconnect_profile_finish (
    bluezdevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device__call_disconnect_profile_sync (
    bluezdevice *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void bluez_device__call_pair (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device__call_pair_finish (
    bluezdevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device__call_pair_sync (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_device__call_cancel_pairing (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device__call_cancel_pairing_finish (
    bluezdevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device__call_cancel_pairing_sync (
    bluezdevice *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *bluez_device__get_address (bluezdevice *object);
gchar *bluez_device__dup_address (bluezdevice *object);
void bluez_device__set_address (bluezdevice *object, const gchar *value);

const gchar *bluez_device__get_name (bluezdevice *object);
gchar *bluez_device__dup_name (bluezdevice *object);
void bluez_device__set_name (bluezdevice *object, const gchar *value);

const gchar *bluez_device__get_alias (bluezdevice *object);
gchar *bluez_device__dup_alias (bluezdevice *object);
void bluez_device__set_alias (bluezdevice *object, const gchar *value);

guint bluez_device__get_class (bluezdevice *object);
void bluez_device__set_class (bluezdevice *object, guint value);

guint16 bluez_device__get_appearance (bluezdevice *object);
void bluez_device__set_appearance (bluezdevice *object, guint16 value);

const gchar *bluez_device__get_icon (bluezdevice *object);
gchar *bluez_device__dup_icon (bluezdevice *object);
void bluez_device__set_icon (bluezdevice *object, const gchar *value);

gboolean bluez_device__get_paired (bluezdevice *object);
void bluez_device__set_paired (bluezdevice *object, gboolean value);

gboolean bluez_device__get_trusted (bluezdevice *object);
void bluez_device__set_trusted (bluezdevice *object, gboolean value);

gboolean bluez_device__get_blocked (bluezdevice *object);
void bluez_device__set_blocked (bluezdevice *object, gboolean value);

gboolean bluez_device__get_legacy_pairing (bluezdevice *object);
void bluez_device__set_legacy_pairing (bluezdevice *object, gboolean value);

gint16 bluez_device__get_rssi (bluezdevice *object);
void bluez_device__set_rssi (bluezdevice *object, gint16 value);

gboolean bluez_device__get_connected (bluezdevice *object);
void bluez_device__set_connected (bluezdevice *object, gboolean value);

const gchar *const *bluez_device__get_uuids (bluezdevice *object);
gchar **bluez_device__dup_uuids (bluezdevice *object);
void bluez_device__set_uuids (bluezdevice *object, const gchar *const *value);

const gchar *bluez_device__get_modalias (bluezdevice *object);
gchar *bluez_device__dup_modalias (bluezdevice *object);
void bluez_device__set_modalias (bluezdevice *object, const gchar *value);

const gchar *bluez_device__get_adapter (bluezdevice *object);
gchar *bluez_device__dup_adapter (bluezdevice *object);
void bluez_device__set_adapter (bluezdevice *object, const gchar *value);

GVariant *bluez_device__get_manufacturer_data (bluezdevice *object);
GVariant *bluez_device__dup_manufacturer_data (bluezdevice *object);
void bluez_device__set_manufacturer_data (bluezdevice *object, GVariant *value);

GVariant *bluez_device__get_service_data (bluezdevice *object);
GVariant *bluez_device__dup_service_data (bluezdevice *object);
void bluez_device__set_service_data (bluezdevice *object, GVariant *value);

gint16 bluez_device__get_tx_power (bluezdevice *object);
void bluez_device__set_tx_power (bluezdevice *object, gint16 value);

const gchar *const *bluez_device__get_gatt_services (bluezdevice *object);
gchar **bluez_device__dup_gatt_services (bluezdevice *object);
void bluez_device__set_gatt_services (bluezdevice *object, const gchar *const *value);


/* ---- */

#define BLUEZ_DEVICE_TYPE__PROXY (bluez_device__proxy_get_type ())
#define BLUEZ_DEVICE__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE__PROXY, bluezdeviceProxy))
#define BLUEZ_DEVICE__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE__PROXY, bluezdeviceProxyClass))
#define BLUEZ_DEVICE__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE__PROXY, bluezdeviceProxyClass))
#define BLUEZ_DEVICE_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE__PROXY))
#define BLUEZ_DEVICE_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE__PROXY))

typedef struct _bluezdeviceProxy bluezdeviceProxy;
typedef struct _bluezdeviceProxyClass bluezdeviceProxyClass;
typedef struct _bluezdeviceProxyPrivate bluezdeviceProxyPrivate;

struct _bluezdeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezdeviceProxyPrivate *priv;
};

struct _bluezdeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_device__proxy_get_type (void) G_GNUC_CONST;

void bluez_device__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdevice *bluez_device__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdevice *bluez_device__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_device__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdevice *bluez_device__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdevice *bluez_device__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_DEVICE_TYPE__SKELETON (bluez_device__skeleton_get_type ())
#define BLUEZ_DEVICE__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE__SKELETON, bluezdeviceSkeleton))
#define BLUEZ_DEVICE__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE__SKELETON, bluezdeviceSkeletonClass))
#define BLUEZ_DEVICE__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE__SKELETON, bluezdeviceSkeletonClass))
#define BLUEZ_DEVICE_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE__SKELETON))
#define BLUEZ_DEVICE_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE__SKELETON))

typedef struct _bluezdeviceSkeleton bluezdeviceSkeleton;
typedef struct _bluezdeviceSkeletonClass bluezdeviceSkeletonClass;
typedef struct _bluezdeviceSkeletonPrivate bluezdeviceSkeletonPrivate;

struct _bluezdeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezdeviceSkeletonPrivate *priv;
};

struct _bluezdeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_device__skeleton_get_type (void) G_GNUC_CONST;

bluezdevice *bluez_device__skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (bluez_device_org_freedesktop_dbus_properties_get_type ())
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, bluezdeviceOrgFreedesktopDBusProperties))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, bluezdeviceOrgFreedesktopDBusPropertiesIface))

struct _bluezdeviceOrgFreedesktopDBusProperties;
typedef struct _bluezdeviceOrgFreedesktopDBusProperties bluezdeviceOrgFreedesktopDBusProperties;
typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesIface bluezdeviceOrgFreedesktopDBusPropertiesIface;

struct _bluezdeviceOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name);

  gboolean (*handle_get_all) (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*properties_changed) (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType bluez_device_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_device_org_freedesktop_dbus_properties_interface_info (void);
guint bluez_device_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_device_org_freedesktop_dbus_properties_complete_get (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void bluez_device_org_freedesktop_dbus_properties_complete_set (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);

void bluez_device_org_freedesktop_dbus_properties_complete_get_all (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus signal emissions functions: */
void bluez_device_org_freedesktop_dbus_properties_emit_properties_changed (
    bluezdeviceOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void bluez_device_org_freedesktop_dbus_properties_call_get (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device_org_freedesktop_dbus_properties_call_get_finish (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device_org_freedesktop_dbus_properties_call_get_sync (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void bluez_device_org_freedesktop_dbus_properties_call_set (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device_org_freedesktop_dbus_properties_call_set_finish (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device_org_freedesktop_dbus_properties_call_set_sync (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void bluez_device_org_freedesktop_dbus_properties_call_get_all (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_device_org_freedesktop_dbus_properties_call_get_all_finish (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean bluez_device_org_freedesktop_dbus_properties_call_get_all_sync (
    bluezdeviceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (bluez_device_org_freedesktop_dbus_properties_proxy_get_type ())
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, bluezdeviceOrgFreedesktopDBusPropertiesProxy))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, bluezdeviceOrgFreedesktopDBusPropertiesProxyClass))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, bluezdeviceOrgFreedesktopDBusPropertiesProxyClass))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesProxy bluezdeviceOrgFreedesktopDBusPropertiesProxy;
typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesProxyClass bluezdeviceOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesProxyPrivate bluezdeviceOrgFreedesktopDBusPropertiesProxyPrivate;

struct _bluezdeviceOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezdeviceOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _bluezdeviceOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_device_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

void bluez_device_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdeviceOrgFreedesktopDBusProperties *bluez_device_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdeviceOrgFreedesktopDBusProperties *bluez_device_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_device_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdeviceOrgFreedesktopDBusProperties *bluez_device_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdeviceOrgFreedesktopDBusProperties *bluez_device_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (bluez_device_org_freedesktop_dbus_properties_skeleton_get_type ())
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, bluezdeviceOrgFreedesktopDBusPropertiesSkeleton))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, bluezdeviceOrgFreedesktopDBusPropertiesSkeletonClass))
#define BLUEZ_DEVICE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, bluezdeviceOrgFreedesktopDBusPropertiesSkeletonClass))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define BLUEZ_DEVICE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesSkeleton bluezdeviceOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesSkeletonClass bluezdeviceOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _bluezdeviceOrgFreedesktopDBusPropertiesSkeletonPrivate bluezdeviceOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _bluezdeviceOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezdeviceOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _bluezdeviceOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_device_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

bluezdeviceOrgFreedesktopDBusProperties *bluez_device_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.ProximityReporter1 */

#define BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1 (bluez_device_org_bluez_proximity_reporter1_get_type ())
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1, bluezdeviceOrgBluezProximityReporter1))
#define BLUEZ_DEVICE_IS_ORG_BLUEZ_PROXIMITY_REPORTER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1))
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1, bluezdeviceOrgBluezProximityReporter1Iface))

struct _bluezdeviceOrgBluezProximityReporter1;
typedef struct _bluezdeviceOrgBluezProximityReporter1 bluezdeviceOrgBluezProximityReporter1;
typedef struct _bluezdeviceOrgBluezProximityReporter1Iface bluezdeviceOrgBluezProximityReporter1Iface;

struct _bluezdeviceOrgBluezProximityReporter1Iface
{
  GTypeInterface parent_iface;

  const gchar * (*get_immediate_alert_level) (bluezdeviceOrgBluezProximityReporter1 *object);

  const gchar * (*get_link_loss_alert_level) (bluezdeviceOrgBluezProximityReporter1 *object);

};

GType bluez_device_org_bluez_proximity_reporter1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_device_org_bluez_proximity_reporter1_interface_info (void);
guint bluez_device_org_bluez_proximity_reporter1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *bluez_device_org_bluez_proximity_reporter1_get_link_loss_alert_level (bluezdeviceOrgBluezProximityReporter1 *object);
gchar *bluez_device_org_bluez_proximity_reporter1_dup_link_loss_alert_level (bluezdeviceOrgBluezProximityReporter1 *object);
void bluez_device_org_bluez_proximity_reporter1_set_link_loss_alert_level (bluezdeviceOrgBluezProximityReporter1 *object, const gchar *value);

const gchar *bluez_device_org_bluez_proximity_reporter1_get_immediate_alert_level (bluezdeviceOrgBluezProximityReporter1 *object);
gchar *bluez_device_org_bluez_proximity_reporter1_dup_immediate_alert_level (bluezdeviceOrgBluezProximityReporter1 *object);
void bluez_device_org_bluez_proximity_reporter1_set_immediate_alert_level (bluezdeviceOrgBluezProximityReporter1 *object, const gchar *value);


/* ---- */

#define BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY (bluez_device_org_bluez_proximity_reporter1_proxy_get_type ())
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY, bluezdeviceOrgBluezProximityReporter1Proxy))
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY, bluezdeviceOrgBluezProximityReporter1ProxyClass))
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY, bluezdeviceOrgBluezProximityReporter1ProxyClass))
#define BLUEZ_DEVICE_IS_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY))
#define BLUEZ_DEVICE_IS_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_PROXY))

typedef struct _bluezdeviceOrgBluezProximityReporter1Proxy bluezdeviceOrgBluezProximityReporter1Proxy;
typedef struct _bluezdeviceOrgBluezProximityReporter1ProxyClass bluezdeviceOrgBluezProximityReporter1ProxyClass;
typedef struct _bluezdeviceOrgBluezProximityReporter1ProxyPrivate bluezdeviceOrgBluezProximityReporter1ProxyPrivate;

struct _bluezdeviceOrgBluezProximityReporter1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezdeviceOrgBluezProximityReporter1ProxyPrivate *priv;
};

struct _bluezdeviceOrgBluezProximityReporter1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_device_org_bluez_proximity_reporter1_proxy_get_type (void) G_GNUC_CONST;

void bluez_device_org_bluez_proximity_reporter1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdeviceOrgBluezProximityReporter1 *bluez_device_org_bluez_proximity_reporter1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdeviceOrgBluezProximityReporter1 *bluez_device_org_bluez_proximity_reporter1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_device_org_bluez_proximity_reporter1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezdeviceOrgBluezProximityReporter1 *bluez_device_org_bluez_proximity_reporter1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezdeviceOrgBluezProximityReporter1 *bluez_device_org_bluez_proximity_reporter1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON (bluez_device_org_bluez_proximity_reporter1_skeleton_get_type ())
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON, bluezdeviceOrgBluezProximityReporter1Skeleton))
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON, bluezdeviceOrgBluezProximityReporter1SkeletonClass))
#define BLUEZ_DEVICE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON, bluezdeviceOrgBluezProximityReporter1SkeletonClass))
#define BLUEZ_DEVICE_IS_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON))
#define BLUEZ_DEVICE_IS_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_DEVICE_TYPE_ORG_BLUEZ_PROXIMITY_REPORTER1_SKELETON))

typedef struct _bluezdeviceOrgBluezProximityReporter1Skeleton bluezdeviceOrgBluezProximityReporter1Skeleton;
typedef struct _bluezdeviceOrgBluezProximityReporter1SkeletonClass bluezdeviceOrgBluezProximityReporter1SkeletonClass;
typedef struct _bluezdeviceOrgBluezProximityReporter1SkeletonPrivate bluezdeviceOrgBluezProximityReporter1SkeletonPrivate;

struct _bluezdeviceOrgBluezProximityReporter1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezdeviceOrgBluezProximityReporter1SkeletonPrivate *priv;
};

struct _bluezdeviceOrgBluezProximityReporter1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_device_org_bluez_proximity_reporter1_skeleton_get_type (void) G_GNUC_CONST;

bluezdeviceOrgBluezProximityReporter1 *bluez_device_org_bluez_proximity_reporter1_skeleton_new (void);


G_END_DECLS

#endif /* __BLUEZ_DEVICE_H__ */
