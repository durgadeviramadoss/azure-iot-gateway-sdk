/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUEZ_CHARACTERISTIC_H__
#define __BLUEZ_CHARACTERISTIC_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (bluez_characteristic_org_freedesktop_dbus_introspectable_get_type ())
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, bluezcharacteristicOrgFreedesktopDBusIntrospectable))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, bluezcharacteristicOrgFreedesktopDBusIntrospectableIface))

struct _bluezcharacteristicOrgFreedesktopDBusIntrospectable;
typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectable bluezcharacteristicOrgFreedesktopDBusIntrospectable;
typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableIface bluezcharacteristicOrgFreedesktopDBusIntrospectableIface;

struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    bluezcharacteristicOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType bluez_characteristic_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_characteristic_org_freedesktop_dbus_introspectable_interface_info (void);
guint bluez_characteristic_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_characteristic_org_freedesktop_dbus_introspectable_complete_introspect (
    bluezcharacteristicOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *xml);



/* D-Bus method calls: */
void bluez_characteristic_org_freedesktop_dbus_introspectable_call_introspect (
    bluezcharacteristicOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic_org_freedesktop_dbus_introspectable_call_introspect_finish (
    bluezcharacteristicOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic_org_freedesktop_dbus_introspectable_call_introspect_sync (
    bluezcharacteristicOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, bluezcharacteristicOrgFreedesktopDBusIntrospectableProxy))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyClass))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyClass))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableProxy bluezcharacteristicOrgFreedesktopDBusIntrospectableProxy;
typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyClass bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyPrivate bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

void bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezcharacteristicOrgFreedesktopDBusIntrospectable *bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezcharacteristicOrgFreedesktopDBusIntrospectable *bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezcharacteristicOrgFreedesktopDBusIntrospectable *bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezcharacteristicOrgFreedesktopDBusIntrospectable *bluez_characteristic_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (bluez_characteristic_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeleton))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonClass))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonClass))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeleton bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonClass bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonPrivate bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _bluezcharacteristicOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_characteristic_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

bluezcharacteristicOrgFreedesktopDBusIntrospectable *bluez_characteristic_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattCharacteristic1 */

#define BLUEZ_CHARACTERISTIC_TYPE_ (bluez_characteristic__get_type ())
#define BLUEZ_CHARACTERISTIC_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_, bluezcharacteristic))
#define BLUEZ_CHARACTERISTIC_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_))
#define BLUEZ_CHARACTERISTIC__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_CHARACTERISTIC_TYPE_, bluezcharacteristicIface))

struct _bluezcharacteristic;
typedef struct _bluezcharacteristic bluezcharacteristic;
typedef struct _bluezcharacteristicIface bluezcharacteristicIface;

struct _bluezcharacteristicIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_read_value) (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_start_notify) (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_notify) (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_write_value) (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_value);

  const gchar *const * (*get_descriptors) (bluezcharacteristic *object);

  const gchar *const * (*get_flags) (bluezcharacteristic *object);

  gboolean  (*get_notifying) (bluezcharacteristic *object);

  const gchar * (*get_service) (bluezcharacteristic *object);

  const gchar * (*get_uuid) (bluezcharacteristic *object);

  const gchar * (*get_value) (bluezcharacteristic *object);

};

GType bluez_characteristic__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_characteristic__interface_info (void);
guint bluez_characteristic__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_characteristic__complete_read_value (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void bluez_characteristic__complete_write_value (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation);

void bluez_characteristic__complete_start_notify (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation);

void bluez_characteristic__complete_stop_notify (
    bluezcharacteristic *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_characteristic__call_read_value (
    bluezcharacteristic *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic__call_read_value_finish (
    bluezcharacteristic *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic__call_read_value_sync (
    bluezcharacteristic *proxy,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void bluez_characteristic__call_write_value (
    bluezcharacteristic *proxy,
    const gchar *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic__call_write_value_finish (
    bluezcharacteristic *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic__call_write_value_sync (
    bluezcharacteristic *proxy,
    const gchar *arg_value,
    GCancellable *cancellable,
    GError **error);

void bluez_characteristic__call_start_notify (
    bluezcharacteristic *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic__call_start_notify_finish (
    bluezcharacteristic *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic__call_start_notify_sync (
    bluezcharacteristic *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_characteristic__call_stop_notify (
    bluezcharacteristic *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic__call_stop_notify_finish (
    bluezcharacteristic *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic__call_stop_notify_sync (
    bluezcharacteristic *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *bluez_characteristic__get_uuid (bluezcharacteristic *object);
gchar *bluez_characteristic__dup_uuid (bluezcharacteristic *object);
void bluez_characteristic__set_uuid (bluezcharacteristic *object, const gchar *value);

const gchar *bluez_characteristic__get_service (bluezcharacteristic *object);
gchar *bluez_characteristic__dup_service (bluezcharacteristic *object);
void bluez_characteristic__set_service (bluezcharacteristic *object, const gchar *value);

const gchar *bluez_characteristic__get_value (bluezcharacteristic *object);
gchar *bluez_characteristic__dup_value (bluezcharacteristic *object);
void bluez_characteristic__set_value (bluezcharacteristic *object, const gchar *value);

gboolean bluez_characteristic__get_notifying (bluezcharacteristic *object);
void bluez_characteristic__set_notifying (bluezcharacteristic *object, gboolean value);

const gchar *const *bluez_characteristic__get_flags (bluezcharacteristic *object);
gchar **bluez_characteristic__dup_flags (bluezcharacteristic *object);
void bluez_characteristic__set_flags (bluezcharacteristic *object, const gchar *const *value);

const gchar *const *bluez_characteristic__get_descriptors (bluezcharacteristic *object);
gchar **bluez_characteristic__dup_descriptors (bluezcharacteristic *object);
void bluez_characteristic__set_descriptors (bluezcharacteristic *object, const gchar *const *value);


/* ---- */

#define BLUEZ_CHARACTERISTIC_TYPE__PROXY (bluez_characteristic__proxy_get_type ())
#define BLUEZ_CHARACTERISTIC__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE__PROXY, bluezcharacteristicProxy))
#define BLUEZ_CHARACTERISTIC__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_CHARACTERISTIC_TYPE__PROXY, bluezcharacteristicProxyClass))
#define BLUEZ_CHARACTERISTIC__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_CHARACTERISTIC_TYPE__PROXY, bluezcharacteristicProxyClass))
#define BLUEZ_CHARACTERISTIC_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE__PROXY))
#define BLUEZ_CHARACTERISTIC_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_CHARACTERISTIC_TYPE__PROXY))

typedef struct _bluezcharacteristicProxy bluezcharacteristicProxy;
typedef struct _bluezcharacteristicProxyClass bluezcharacteristicProxyClass;
typedef struct _bluezcharacteristicProxyPrivate bluezcharacteristicProxyPrivate;

struct _bluezcharacteristicProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezcharacteristicProxyPrivate *priv;
};

struct _bluezcharacteristicProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_characteristic__proxy_get_type (void) G_GNUC_CONST;

void bluez_characteristic__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezcharacteristic *bluez_characteristic__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezcharacteristic *bluez_characteristic__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_characteristic__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezcharacteristic *bluez_characteristic__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezcharacteristic *bluez_characteristic__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_CHARACTERISTIC_TYPE__SKELETON (bluez_characteristic__skeleton_get_type ())
#define BLUEZ_CHARACTERISTIC__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE__SKELETON, bluezcharacteristicSkeleton))
#define BLUEZ_CHARACTERISTIC__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_CHARACTERISTIC_TYPE__SKELETON, bluezcharacteristicSkeletonClass))
#define BLUEZ_CHARACTERISTIC__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_CHARACTERISTIC_TYPE__SKELETON, bluezcharacteristicSkeletonClass))
#define BLUEZ_CHARACTERISTIC_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE__SKELETON))
#define BLUEZ_CHARACTERISTIC_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_CHARACTERISTIC_TYPE__SKELETON))

typedef struct _bluezcharacteristicSkeleton bluezcharacteristicSkeleton;
typedef struct _bluezcharacteristicSkeletonClass bluezcharacteristicSkeletonClass;
typedef struct _bluezcharacteristicSkeletonPrivate bluezcharacteristicSkeletonPrivate;

struct _bluezcharacteristicSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezcharacteristicSkeletonPrivate *priv;
};

struct _bluezcharacteristicSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_characteristic__skeleton_get_type (void) G_GNUC_CONST;

bluezcharacteristic *bluez_characteristic__skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (bluez_characteristic_org_freedesktop_dbus_properties_get_type ())
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, bluezcharacteristicOrgFreedesktopDBusProperties))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, bluezcharacteristicOrgFreedesktopDBusPropertiesIface))

struct _bluezcharacteristicOrgFreedesktopDBusProperties;
typedef struct _bluezcharacteristicOrgFreedesktopDBusProperties bluezcharacteristicOrgFreedesktopDBusProperties;
typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesIface bluezcharacteristicOrgFreedesktopDBusPropertiesIface;

struct _bluezcharacteristicOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name);

  gboolean (*handle_get_all) (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*properties_changed) (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType bluez_characteristic_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_characteristic_org_freedesktop_dbus_properties_interface_info (void);
guint bluez_characteristic_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_characteristic_org_freedesktop_dbus_properties_complete_get (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void bluez_characteristic_org_freedesktop_dbus_properties_complete_set (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);

void bluez_characteristic_org_freedesktop_dbus_properties_complete_get_all (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus signal emissions functions: */
void bluez_characteristic_org_freedesktop_dbus_properties_emit_properties_changed (
    bluezcharacteristicOrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void bluez_characteristic_org_freedesktop_dbus_properties_call_get (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic_org_freedesktop_dbus_properties_call_get_finish (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic_org_freedesktop_dbus_properties_call_get_sync (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void bluez_characteristic_org_freedesktop_dbus_properties_call_set (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic_org_freedesktop_dbus_properties_call_set_finish (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic_org_freedesktop_dbus_properties_call_set_sync (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void bluez_characteristic_org_freedesktop_dbus_properties_call_get_all (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_characteristic_org_freedesktop_dbus_properties_call_get_all_finish (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean bluez_characteristic_org_freedesktop_dbus_properties_call_get_all_sync (
    bluezcharacteristicOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (bluez_characteristic_org_freedesktop_dbus_properties_proxy_get_type ())
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, bluezcharacteristicOrgFreedesktopDBusPropertiesProxy))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, bluezcharacteristicOrgFreedesktopDBusPropertiesProxyClass))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, bluezcharacteristicOrgFreedesktopDBusPropertiesProxyClass))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesProxy bluezcharacteristicOrgFreedesktopDBusPropertiesProxy;
typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesProxyClass bluezcharacteristicOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesProxyPrivate bluezcharacteristicOrgFreedesktopDBusPropertiesProxyPrivate;

struct _bluezcharacteristicOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  bluezcharacteristicOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _bluezcharacteristicOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_characteristic_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

void bluez_characteristic_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezcharacteristicOrgFreedesktopDBusProperties *bluez_characteristic_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
bluezcharacteristicOrgFreedesktopDBusProperties *bluez_characteristic_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_characteristic_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
bluezcharacteristicOrgFreedesktopDBusProperties *bluez_characteristic_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
bluezcharacteristicOrgFreedesktopDBusProperties *bluez_characteristic_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (bluez_characteristic_org_freedesktop_dbus_properties_skeleton_get_type ())
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, bluezcharacteristicOrgFreedesktopDBusPropertiesSkeleton))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonClass))
#define BLUEZ_CHARACTERISTIC_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonClass))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define BLUEZ_CHARACTERISTIC_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_CHARACTERISTIC_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesSkeleton bluezcharacteristicOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonClass bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonPrivate bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _bluezcharacteristicOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _bluezcharacteristicOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_characteristic_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

bluezcharacteristicOrgFreedesktopDBusProperties *bluez_characteristic_org_freedesktop_dbus_properties_skeleton_new (void);


G_END_DECLS

#endif /* __BLUEZ_CHARACTERISTIC_H__ */
